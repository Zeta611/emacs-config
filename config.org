#+TITLE: My Emacs config
#+AUTHOR: Jay Lee
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS_OPTIONS: [a4paper,11pt]
#+LATEX_HEADER: \usepackage{kotex}
#+LATEX_HEADER: \RequirePackage[math-style=TeX,bold-style=TeX]{unicode-math}
#+LATEX_HEADER: \setmainfont{Libertinus Serif}
#+LATEX_HEADER: \setsansfont{Libertinus Sans}[Scale=MatchUppercase]
#+LATEX_HEADER: \setmonofont{Inconsolata}[Scale=MatchLowercase]
#+LATEX_HEADER: \setmathfont{Libertinus Math}[Scale=MatchUppercase] % Before set*hangulfont
#+LATEX_HEADER: \setmainhangulfont{Noto Serif CJK KR}[Scale=.885]
#+LATEX_HEADER: \setsanshangulfont[BoldFont={* Bold}]{KoPubWorldDotum_Pro}[Scale=.885]
#+LATEX_HEADER: \setmonohangulfont{D2Coding}[Scale=MatchLowercase]

* Package management
** MELPA
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

** Better package setup
Use =use-package=
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    ; Always make sure packages are installed correctly at every startup
    (setq use-package-always-ensure t
          use-package-expand-minimally t))
#+end_src

** Modernized package menu
Use =paradox=.
#+begin_src emacs-lisp
  (use-package paradox
    :ensure t
    :init (paradox-enable))
#+end_src

* Pretty Emacs
** Theme
Although [[https://github.blog/2022-06-08-sunsetting-atom/][Atom is being sunset by GitHub]], the default theme it provided is one of the best-looking and easy-on-the-eyes color scheme out in the wild.
=doom-one= theme is more actively maintained than =atom-one-dark-theme=.
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src

Sync with the system theme.
#+begin_src emacs-lisp
  (defun my/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (load-theme 'doom-one-light t))
      ('dark (load-theme 'doom-one t))))

  (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src

** Font
JuliaMono provides the most comprehensive unicode support.
#+begin_src emacs-lisp
  (add-to-list 'after-make-frame-functions #'set-default-fonts)
  (defun set-default-fonts (_)
    (if (eq system-type 'darwin)
	(set-face-attribute 'default nil :font "JuliaMono 15")
	(set-face-attribute 'default nil :font "JuliaMono 12"))
    (set-fontset-font "fontset-default" 'hangul (font-spec :family "D2Coding"))
    )
  (setq face-font-rescale-alist '(("D2Coding" . 1.2)))
  ;; (add-to-list 'default-frame-alist '(font . "JuliaMono 15"))
#+end_src

Use D2Coding for hangul (Korean letters).
To reliably set a hangul font, it needs to be run lately.
I did not experiment with the earliest possible stage it needs to run, but it does work when run in a hook `after-make-frame-functions`.
#+begin_src emacs-lisp
  ;; (defun set-hangul-font (_)
  ;;   (set-fontset-font t 'hangul (font-spec :name "D2Coding"))
  ;;   (setq face-font-rescale-alist '(("D2Coding" . 1.2))))
  ;; (add-to-list 'after-make-frame-functions #'set-hangul-font)
#+end_src

D2Coding is scaled so that a single Korean letter corresponds to two ASCII letters:
| English | Korean |
|---------+--------|
| Emacs   | 이맥스 |
| Vim     | 빔     |

** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+end_src

** Modeline Theme
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :config
    (if (eq system-type 'darwin)
	(custom-set-faces
	 '(mode-line ((t (:family "Fira Sans" :height 135))))
	 '(mode-line-active ((t (:family "Fira Sans" :height 135))))
	 '(mode-line-inactive ((t (:family "Fira Sans" :height 135)))))
	(custom-set-faces
	 '(mode-line ((t (:family "Fira Sans" :height 115))))
	 '(mode-line-active ((t (:family "Fira Sans" :height 115))))
	 '(mode-line-inactive ((t (:family "Fira Sans" :height 115))))))
    :hook (after-init . doom-modeline-mode))
#+end_src

** File explorer
A Tree layout file explorer.
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :bind
    (:map global-map
      ("M-0"       . treemacs-select-window)
      ("C-x t 1"   . treemacs-delete-other-windows)
      ("C-x t t"   . treemacs)
      ("C-x t d"   . treemacs-select-directory)
      ("C-x t B"   . treemacs-bookmark)
      ("C-x t C-t" . treemacs-find-file)
      ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
#+end_src

** Tabs
Tabs!
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :demand
    :ensure t
    :bind
    ("C-S-<tab>" . centaur-tabs-backward)
    ("C-<tab>" . centaur-tabs-forward)
    :config
    (if (eq system-type 'darwin)
	(centaur-tabs-change-fonts "Fira Sans" 135)
	(centaur-tabs-change-fonts "Fira Sans" 115))
    (setq centaur-tabs-height 32
	  centaur-tabs-set-icons t
	  centaur-tabs-modified-marker (make-string 1 #x23FA)
	  centaur-tabs-set-modified-marker t)
    (centaur-tabs-group-by-projectile-project)
    (centaur-tabs-mode t))
#+end_src

** Miscellaneous
Seamless title bar in macOS.
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (use-package ns-auto-titlebar
    :ensure t
    :config (ns-auto-titlebar-mode))
#+end_src

Also remove the excessive scroll bar.
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

Line numbering.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src

Prettify symbols.
#+begin_src emacs-lisp
  (global-prettify-symbols-mode 1)
#+end_src

Show time.
#+begin_src emacs-lisp
  (display-time-mode 1)
#+end_src

Dashboard.
#+begin_src emacs-lisp
  ;; (use-package page-break-lines
  ;;   :ensure t)

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ; show dashboard after emacsclient -c
    (setq initial-buffer-choice
      (lambda () (get-buffer-create "*dashboard*")))

    (setq dashboard-projects-backend 'projectile)
    (add-to-list 'dashboard-items '(projects . 5))
    (setq dashboard-banner-logo-title "Hi, Jay!")
    (setq dashboard-startup-banner "~/.emacs.d/blackhole-lines.svg")
    (setq dashboard-image-banner-max-width 512)
    (setq dashboard-image-banner-max-height 512)
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t))
#+end_src

* Key bindings
** Hints
Show what key bindings are available.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

Show completions.
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode)
    (setq ivy-use-virtual-buffers t))
#+end_src

** Navigation
Incremental search using ivy.
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :after ivy
    :bind ("C-s" . swiper-isearch))
#+end_src

Use numbering to move frames.
#+begin_src emacs-lisp
  (use-package window-numbering
    :ensure t
    :config (window-numbering-mode))
#+end_src

Automatically move to the newly opened split window.
#+begin_src emacs-lisp
  (global-set-key "\C-x2" (lambda () (interactive) (split-window-vertically) (other-window 1)))
  (global-set-key "\C-x3" (lambda () (interactive) (split-window-horizontally) (other-window 1)))
#+end_src

Easymotion in Emacs!
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    (("C-;" . 'avy-goto-char)
     ("M-g l" . 'avy-goto-line)
     ("M-g w" . 'avy-goto-word-1)
     ("M-g e" . 'avy-goto-word-0)))
#+end_src

Jump like vimmers do!
#+begin_src emacs-lisp
  (use-package better-jumper
    :ensure t
    :init (better-jumper-mode 1)
    :config
    (define-key input-decode-map "\C-i" [C-i])
    :bind
    (("C-o" . 'better-jumper-jump-backward)
     ("C-i" . 'better-jumper-jump-forward)))
#+end_src

** Miscellaneous
Use command as meta in macOS.
#+begin_src emacs-lisp
  (setq mac-command-modifier 'meta)
#+end_src

Stop fighting indentation in Org mode code snippets.
#+begin_src emacs-lisp
  (setq org-adapt-indentation nil)
#+end_src

Temporarily maximize a buffer.
#+begin_src emacs-lisp
  (defun toggle-maximize-buffer ()
    "Maximize a buffer temporarily."
    (interactive)
    (if (= 1 (length (window-list)))
	(jump-to-register '_)
      (progn
	(window-configuration-to-register '_)
	(delete-other-windows))))
  (global-set-key (kbd "<C-M-return>") #'toggle-maximize-buffer)
#+end_src

* Languages
** Tools
Syntax checking
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

Completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init (global-company-mode))
#+end_src

EditorConfig.
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src

*** Language server protocol
Settings for LSP.
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init (setq lsp-keymap-prefix "C-c l")
    :bind (("C-c d" . lsp-find-definition)
	   ("C-c r" . lsp-rename))
    :hook
    ((tuareg-mode . lsp)
     (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :config
    (setq lsp-ui-doc-show-with-cursor t))

  (use-package lsp-ivy
    :ensure t
    :after (lsp-mode ivy)
    :commands lsp-ivy-workspace-symbol)

  ;; (use-package lsp-treemacs
  ;;   :ensure t
  ;;   :after (lsp-mode treemacs)
  ;;   :commands lsp-treemacs-errors-list)
#+end_src

** Lisps
Pseudo-structural editing.
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :init
    (autoload 'enable-paredit-mode "paredit"
      "Turn on pseudo-structural editing of Lisp code."
      t)
    :config
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'enable-paredit-mode))
#+end_src

Prettify lambda.
#+begin_src emacs-lisp
  (defun prettify-lambda ()
    "Prettify lambda"
    (push '("lambda" . 955) prettify-symbols-alist))
#+end_src

*** Scheme
Set scheme interpreter to Chicken Scheme.
#+begin_src emacs-lisp
  (setq scheme-program-name "csi")
#+end_src

Use =geiser=.
#+begin_src emacs-lisp
  (use-package geiser-chicken
    :ensure t)
#+end_src

Prettify symbols.
#+begin_src emacs-lisp
  (add-hook 'scheme-mode-hook #'prettify-lambda)
#+end_src

** OCaml
These packages are installed via `opam`, not from MELPA.
#+begin_src emacs-lisp
  (if (member system-type '(darwin gnu/linux))
    (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
    (use-package ocamlformat
      :ensure nil
      :custom (ocamlformat-enable 'enable-outside-detected-project)
      :bind (:map tuareg-mode-map
  		("C-M-<tab>" . ocamlformat))
      :hook (before-save . ocamlformat-before-save)))
#+end_src

Better error message.
#+begin_src emacs-lisp
  (defun set-ocaml-error-regexp ()
    (set
     'compilation-error-regexp-alist
     (list '("[Ff]ile \\(\"\\(.*?\\)\", line \\(-?[0-9]+\\)\\(, characters \\(-?[0-9]+\\)-\\([0-9]+\\)\\)?\\)\\(:\n\\(\\(Warning .*?\\)\\|\\(Error\\)\\):\\)?"
      2 3 (5 . 6) (9 . 11) 1 (8 compilation-message-face)))))

  (add-hook 'tuareg-mode-hook #'set-ocaml-error-regexp)
  (add-hook 'caml-mode-hook #'set-ocaml-error-regexp)
#+end_src

** ReScript
#+begin_src emacs-lisp
  (use-package rescript-mode
    :ensure t)
  (use-package lsp-rescript
    :ensure t)
  ;; Tell `rescript-mode` how to run your copy of `server.js` from rescript-vscode
  ;; (you'll have to adjust the path here to match your local system):
  (customize-set-variable
   'lsp-rescript-server-command
   '("node" "/Users/jay/.vscode/extensions/chenglou92.rescript-vscode-1.5.18/server/out/server.js" "--stdio"))
  (with-eval-after-load 'rescript-mode
    ;; Tell `lsp-mode` about the `rescript-vscode` LSP server
    (defun format-rescript ()
      (interactive)
      (when (eq major-mode 'rescript-mode)
	(shell-command-to-string (format "yarn run rescript format %s" buffer-file-name))))
    (add-hook 'after-save-hook #'format-rescript)
    (require 'lsp-rescript)
    ;; Enable `lsp-mode` in rescript-mode buffers
    (add-hook 'rescript-mode-hook 'lsp-deferred)
    ;; Enable display of type information in rescript-mode buffers
    (require 'lsp-ui)
    ;; (add-hook 'before-save-hook 'lsp-format-buffer)
    (add-hook 'rescript-mode-hook 'lsp-ui-doc-mode))
#+end_src

** JavaScript
#+begin_src emacs-lisp
  (setq js-indent-level 2)
  (add-hook 'js-mode-hook 'lsp)
#+end_src

** TypeScript
#+begin_src emacs-lisp
  (setq typescript-indent-level 2)
  (use-package typescript-mode
    :ensure t)
#+end_src

** Web
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2))
#+end_src

** CSS
#+begin_src emacs-lisp
  (use-package lsp-tailwindcss
    :init
    (setq lsp-tailwindcss-add-on-mode t)
    :config
    (add-to-list 'lsp-tailwindcss-major-modes 'rescript-mode))
  (setq-default css-indent-offset 2)
#+end_src

** Python
Use =elpy=.
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init (elpy-enable))
#+end_src

*** Jupyter
#+begin_src emacs-lisp
  (use-package ein
    :ensure t)
#+end_src

** TeX
Use =AucTeX=.
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :config
    (setq TeX-view-program-selection '((output-pdf "Skim"))))
#+end_src

** Org mode
Font size and symbols.
#+begin_src emacs-lisp
  (create-fontset-from-fontset-spec
   (font-xlfd-name
    (font-spec :family "EB Garamond"
	       :size 18
	       :registry "fontset-myvariable")))
  ;;(set-fontset-font
  ;; "fontset-myvariable"
  ;; 'hangul (font-spec :family "Noto Serif CJK KR" :size 19 :registry "iso10646-1"))

  ;; (defun set-variable-fonts (_)
  ;;   (set-face-attribute
  ;;   'variable-pitch nil :font "fontset-myvariable" :fontset "fontset-myvariable"))

  ;; (add-to-list 'after-make-frame-functions #'set-variable-fonts)

  ;; (use-package mixed-pitch
  ;;   :ensure t
  ;;   :hook
  ;;   (org-mode . mixed-pitch-mode)
  ;;   :config
  ;;   (setq mixed-pitch-set-height t)
  ;;   ;(set-variable-fonts t)
  ;;   (set-face-attribute
  ;;    'variable-pitch nil :font "fontset-myvariable" :fontset "fontset-myvariable"))

  ;;(use-package company-posframe
  ;;  :ensure t
  ;;  :hook
  ;;  (company-posframe-mode 1))

  (use-package org-modern
    :ensure t
    :config
    ;; hide #+TITLE:
    (setq org-hidden-keywords '(title))
    (set-face-attribute 'org-default nil :height 1.5)
    ;; set basic title font
    (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
    ;; Low levels are unimportant = no scaling
    (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
    ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
    (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.2) ;\large
    (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.44) ;\Large
    (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.728) ;\LARGE
    ;; Only use the first 4 styles and do not cycle.
    (setq org-cycle-level-faces nil)
    (setq org-n-level-faces 4)
    ;; Document Title, (\huge)
    (set-face-attribute 'org-document-title nil
			:height 2.074
			:foreground 'unspecified)
    (global-org-modern-mode))
#+end_src

Prettify symbols.
#+begin_src emacs-lisp
  (add-hook
   'org-mode-hook
   (lambda ()
     "Prettify Org mode symbols"
     (push '("[ ]" . "☐") prettify-symbols-alist)
     (push '("[X]" . "☑") prettify-symbols-alist)
     (push '("[-]" . "❍") prettify-symbols-alist)))
#+end_src

Do not open a new window when editing source.
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

Babel.
#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((scheme . t)
      (python . t)
      (ein . t)))
  (setq org-confirm-babel-evaluate nil)
#+end_src

Agenda.
#+begin_src emacs-lisp
  (add-hook
   'org-mode-hook
   (if (eq system-type 'darwin)
     (setq org-agenda-files '("~/Sync/org-agenda/reading.org" "/Users/jay/Sync/org-agenda/todo.org" "/Users/jay/Sync/org-agenda/exa.org" "/Users/jay/Sync/org-agenda/prospect.org" "/Users/jay/Sync/org-agenda/eko.org" "/Users/jay/Sync/org-agenda/gp.org")))
   (setq org-log-done 'time)
   (setq org-todo-keywords '((sequence "TODO(t)" "PROJ(p)" "WAIT(w)" "|" "DONE(d)" "CANCELLED(c)"))))
#+end_src

*** LaTeX
#+begin_src emacs-lisp
  (use-package ox
    :ensure nil
    :config
    (setq org-format-latex-options
          (plist-put org-format-latex-options :scale 1.5))
    (setq org-latex-create-formula-image-program 'dvisvgm)
    (setq org-preview-latex-default-process 'dvisvgm))
#+end_src

Automatically toggle LaTeX fragment previews.
#+begin_src emacs-lisp
  (use-package org-fragtog
    :ensure t
    :hook (org-mode . org-fragtog-mode))
#+end_src

DocView settings for preview.
#+begin_src emacs-lisp
  (setq doc-view-resolution 600)
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  (add-hook 'doc-view-mode-hook 'doc-view-fit-width-to-window)
#+end_src

** Agda
#+begin_src emacs-lisp
  (if (eq system-type 'darwin)
    (load-file (let ((coding-system-for-read 'utf-8))
  	       (shell-command-to-string "agda-mode locate")))
    ;; auto-load agda-mode for .agda and .lagda.md
    (setq auto-mode-alist
       (append
         '(("\\.agda\\'" . agda2-mode)
  	 ("\\.lagda.md\\'" . agda2-mode))
         auto-mode-alist)))
#+end_src

** C
I only use tab-indentation in C, so here it is:
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 8)
  (setq backward-delete-char-untabify-method 'hungry)

  (setq-default c-default-style "k&r")
  (setq-default c-basic-offset 8)
  (add-hook 'c-mode-common-hook
            (lambda () (setq indent-tabs-mode t)))
  (add-hook 'c-mode-common-hook 'lsp)

  ;;(use-package smart-tabs-mode
  ;;  :ensure t
  ;;  :config
  ;;  (smart-tabs-insinuate 'c))

  (setq whitespace-style '(face tabs tab-mark trailing))
  (custom-set-faces
   '(whitespace-tab ((t (:foreground "#636363")))))
  (setq whitespace-display-mappings
        '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'
  (global-whitespace-mode) ; Enable whitespace mode everywhere
#+end_src

** Miscellaneous
Visually match parentheses.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

* Miscellaneous
** Other Emacs settings
Always select the help window.
#+begin_src emacs-lisp
  (setq help-window-select t)
#+end_src

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src

** Git
Use =Magit=.
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-file-dispatch))) ; instead of C-c M-g, as recommended by the manual
#+end_src

** Project management
Use =projectile=
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))
#+end_src

** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq dired-kill-when-opening-new-dired-buffer t)
    (setq dired-dwim-target t))
#+end_src

** Terminal and shell
Use =vterm=.
#+begin_src emacs-lisp
  (if (eq system-type 'darwin)
    (use-package vterm
      :ensure t))
#+end_src

#+begin_src emacs-lisp
  (if (eq system-type 'darwin)
    (use-package multi-vterm
      :ensure t))
#+end_src

** Native compilation
#+begin_src emacs-lisp
  (setq native-comp-async-report-warnings-errors nil)
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package docker-tramp
    :ensure t)
#+end_src

** Presentation
#+begin_src emacs-lisp
  (use-package moom
    :ensure t
    :config (moom-mode 1))

  (use-package org-tree-slide
    :ensure t
    :config
    (global-set-key (kbd "<f8>") 'org-tree-slide-mode)
    (global-set-key (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle))
#+end_src
